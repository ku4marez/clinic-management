name: Build, Test, and Package Client and Server

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.stats()' | mongo localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Java for the server
      - name: Set up JDK 21 for Server
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'
          cache: maven

      # Start Docker Compose
      - name: Start Docker Compose
        run: |
          docker-compose -f clinic-management-server/src/test/resources/docker-compose.yml up -d

      # Wait for MongoDB to be ready
      - name: Wait for MongoDB
        run: |
          until docker exec $(docker ps -q -f name=mongo) mongo --eval 'db.runCommand({ ping: 1 })' &> /dev/null; do
            echo "Waiting for MongoDB to be ready..."
            sleep 5
          done

      # Build and test the server
      - name: Build and Test Server
        working-directory: clinic-management-server
        run: mvn clean install --no-transfer-progress

      # Upload server artifact
      - name: Upload Server Artifact
        uses: actions/upload-artifact@v3
        with:
          name: clinic-management-server-jar
          path: clinic-management-server/target/*.jar

      # Tear down Docker Compose after tests
      - name: Tear Down Docker Compose
        if: always()
        run: docker-compose -f clinic-management-server/src/test/resources/docker-compose.yml down

      # Set up Node.js for the client
      - name: Set up Node.js for Client
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install dependencies and build the client
      - name: Install Dependencies and Build Client
        working-directory: clinic-management-client
        run: |
          npm install
          npm run build

      # Upload client artifact
      - name: Upload Client Artifact
        uses: actions/upload-artifact@v3
        with:
          name: clinic-management-client-build
          path: clinic-management-client/build
